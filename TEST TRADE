import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export default function SolanaPaperTrade() {
  const [solBalance, setSolBalance] = useState(100); // Default SOL balance
  const [contractAddress, setContractAddress] = useState("");
  const [memeCoinPrice, setMemeCoinPrice] = useState(null);
  const [tradeHistory, setTradeHistory] = useState([]);

  useEffect(() => {
    if (contractAddress) {
      fetchMemeCoinPrice(contractAddress);
    }
  }, [contractAddress]);

  async function fetchMemeCoinPrice(ca) {
    try {
      const response = await fetch(`https://api.bullx.io/price/${ca}`);
      const data = await response.json();
      setMemeCoinPrice(data.price);
    } catch (error) {
      console.error("Error fetching price:", error);
    }
  }

  function handleBuy() {
    if (memeCoinPrice && solBalance >= memeCoinPrice) {
      setSolBalance(solBalance - memeCoinPrice);
      setTradeHistory([...tradeHistory, { type: "Buy", price: memeCoinPrice }]);
    }
  }

  function handleSell() {
    setSolBalance(solBalance + memeCoinPrice);
    setTradeHistory([...tradeHistory, { type: "Sell", price: memeCoinPrice }]);
  }

  return (
    <div className="p-4 max-w-lg mx-auto">
      <Card className="p-4 text-center">
        <h2 className="text-xl font-bold">Solana Paper Trade</h2>
        <p>SOL Balance: {solBalance.toFixed(2)} SOL</p>
        <Input
          placeholder="Enter Meme Coin CA"
          value={contractAddress}
          onChange={(e) => setContractAddress(e.target.value)}
          className="my-2"
        />
        <p>Price: {memeCoinPrice ? `${memeCoinPrice} SOL` : "Fetching..."}</p>
        <Button onClick={handleBuy} className="m-2">Buy</Button>
        <Button onClick={handleSell} className="m-2">Sell</Button>
      </Card>
      <Card className="mt-4 p-4">
        <h3 className="text-lg font-bold">Trade History</h3>
        <ul>
          {tradeHistory.map((trade, index) => (
            <li key={index}>{trade.type} at {trade.price.toFixed(4)} SOL</li>
          ))}
        </ul>
      </Card>
    </div>
  );
}
